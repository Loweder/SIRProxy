# Receive data from server
# Arguments
#   1: Address
#   2: Size
function receive_data {
	v_echo "[${a_p["$1"]}] Got data from proxy: UUID - '$1', Size - $2"
	dd bs="$2" count=1 <&$ln_pi >&${a_o["$1"]} 2>/dev/null
}

# Send data to server in format "<address> <size>\n<datagram>"
# Arguments
#   1: Address
#   2: Data
function transmit_data {
	s_size="$(( ${#2} / 2 ))"
	v_echo "[${a_p["$1"]}] Got data to proxy: UUID - '$1', Size - $s_size"
	echo "$1 $s_size" >&$ln_po
	echo "$2" | xxd -r -p >&$ln_po
}

# Attach a client
# Arguments
#   1: Message
#   2: Address
function client_attach {
	v_echo "$1 $2"
	coproc socat -T "$timeout" STDIO UDP-SENDTO:"$server_host":"$server_port";
	a_p["$2"]="$!"
	exec {a_i["$2"]}<&${COPROC[0]}- {a_o["$2"]}>&${COPROC[1]}-
	v_echo "[${a_p["$2"]}] FDs are: Server IN - ${a_i["$2"]}, Server OUT - ${a_o["$2"]}"
	unset COPROC
}

# Detach a client
# Arguments
#   1: Message
#   2: Address
function client_detach {
	v_echo "[${a_p["$2"]}] $1 $2"
	kill "${a_p["$2"]}" 2>/dev/null
	unset a_p["$2"]
	unset a_i["$2"]
	unset a_o["$2"]
}

export IFS=" "
add_param "server_host" "Host of the target server"
add_param "server_port" "Port of the target server"
add_param "proxy_host" "Host of the external proxy"
add_param "proxy_port" "Port of the external proxy"
add_opt "T" "timeout" "sec" 5 "Set timeout on the connections"
parse_opts $@

#Set trap for shutdown
trap 'exit_kill' SIGTERM SIGINT SIGABRT

#Initiate sockets
connect_coproc "Connecting to proxy at" "TCP" "$proxy_host:$proxy_port" "" ln_pi ln_po

declare -A a_o a_i a_p

while true; do
	#Wait for replies
	for s_addr in "${!a_p[@]}"; do
		if [[ ! -d "/proc/${a_p["$s_addr"]}" ]]; then
			client_detach "Server timed out at" "$s_addr"
		else
			s_data="$(dd status=none iflag=nonblock <&${a_i["$s_addr"]} 2>/dev/null | xxd -p -c 0)"
			[[ -n "$s_data" ]] && transmit_data "$s_addr" "$s_data"
		fi
	done

	#Wait for connections
	read -r -u $ln_pi -t 0.1 s_addr s_size
	s_code=$?
	if [[ $s_code -eq 0 ]]; then
		[[ ! -d "/proc/${a_p["$s_addr"]:-cmdline}" ]] && client_attach "Connecting a client" "$s_addr"
		receive_data "$s_addr" "$s_size"
	elif [[ $s_code -eq 1 ]]; then
		v_echo "Proxy disconnected, exiting"
		exit_kill
	fi
done
