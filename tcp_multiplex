#!/usr/bin/env bash

source "./locale"

function client_anonymise {
	declare -n l_addr="$1"
	if [[ "$anonymise" -eq 0 ]]; then
		return
	else
		l_addr="$2-RANDOM-$RANDOM"
	fi
}
function client_attach {
	v_echo "[$3] $1 $2"
	a_p["$2"]="$3"
	a_i["$2"]="$4"
	a_o["$2"]="$5"
}
function server_attach {
	v_echo "[$3] $1 $2"
	a_c["$2"]="$3"
	echo "${a_p["$2"]} ${a_o["$2"]} ${a_i["$2"]}" >"/proc/$3/fd/$4"
	unset a_o["$2"]
	unset a_i["$2"]
}
function client_detach {
	v_echo "[${a_p["$2"]}] $1 $2"
	kill "${a_c["$2"]}" 2>/dev/null
	unset a_p["$2"]
	unset a_c["$2"]
	unset a_i["$2"]
	unset a_o["$2"]
}
function server_detach {
	v_echo "[${a_p["$2"]}] $1 $2"
	kill "${a_p["$2"]}" 2>/dev/null
	unset a_p["$2"]
	unset a_c["$2"]
}

export multicall="${multicall:-SERVER}"

case $multicall in
	SERVER)
		export IFS=" "
		export socket="${TMPDIR:-/tmp}/tcp_proxy.$$"
		add_param "server_metaport" "Port from which the server will receive metadata"
		add_param "server_dataport" "Port to which the server will connect data lines"
		add_param "client_port" "Port to which the clients will connect"
		add_opt "a" "anonymise" 0 "Anonymise clients"
		parse_opts $@

		#Set trap for shutdown
		trap 'exit_kill_server a_p a_c' SIGTERM SIGINT SIGABRT

		#Initiate sockets
		connect_coproc "Listening for server meta at" "TCP-LISTEN" "$server_metaport" ",reuseaddr" ln_pi ln_po
		connect_coproc "Internal communication at" "UNIX-RECV" "$socket" "" ln_ii ln_io "-u"
		export multicall=LINE; #Set type to "LINE", for server lines to have
		connect "Listening for server lines at" "TCP-LISTEN" "$server_dataport" ",reuseaddr,fork"
		export multicall=CLIENT; #Set type to "CLIENT", for clients to have
		connect "Listening for client lines at" "TCP-LISTEN" "$client_port" ",reuseaddr,fork"

		declare -A a_o a_i a_p a_c
		
		while true; do
			#Wait for child commands
			if read -r -u $ln_ii -t 0.1 s_cmd s_pid s_addr ln_si ln_so; then
				case $s_cmd in
					TERM-CLIENT) #Received a command to detach a client line
						[[ "${a_p["$s_addr"]}" == "$s_pid" ]] && client_detach "Client line closed at" "$s_addr" ;;
					TERM-SERVER) #Received a command to detach a server line
						[[ "${a_c["$s_addr"]}" == "$s_pid" ]] && server_detach "Server line closed at" "$s_addr" ;;
					LINK-CLIENT) #Received a command to attach a client line
						client_attach "Connecting a client line" "$s_addr" "$s_pid" "$ln_si" "$ln_so"
						echo "$s_addr" >&$ln_po #Order the server meta to connect
						;;
					LINK-SERVER) #Received a command to attach a server line
						if [[ ! -v a_p["$s_addr"] || -v a_c["$s_addr"] ]]; then
							kill "$s_pid" 2>/dev/null #The connection is already established, or doesn't exist
						else #Permit the connection
							server_attach "Connecting a server line" "$s_addr" "$s_pid" "$ln_si"
						fi
						;;
				esac
			fi

			#Check server meta integrity
			read -r -u "$ln_pi" -t 0.001
			s_code=$?
			if [[ "$s_code" -eq 1 ]]; then
				v_echo "Server disconnected, exiting"
				exit_kill_server a_p a_c
			fi
		done
		;;
	LINE)
		exec {ln_ii}<> <(:) #Create input pipe for master meta

		read -r s_addr #Read address from server line

		#Set trap for shutdown
		trap 'socat STDIN UNIX-SENDTO:$socket <<< "TERM-SERVER $$ $s_addr"; exit_kill' SIGTERM SIGINT SIGABRT

		#Notify the master that we're ready to connect
		socat STDIN UNIX-SENDTO:$socket <<<"LINK-SERVER $$ $s_addr $ln_ii"

		read -r -u "$ln_ii" s_pid ln_si ln_so #Get metadata from master
		exec {ln_ii}>&- #No longer need this line

		#Exchange data
		cat <"/proc/$s_pid/fd/$ln_si" >&1 &
		cat >"/proc/$s_pid/fd/$ln_so" <&0 &
		exit_wait
		;;
	CLIENT)
		exec {ln_si}<> <(:) #Create input pipe for from-server line
		exec {ln_so}<> <(:) #Create output pipe for to-server line

		#Obtain and anonymise the address
		s_addr="$SOCAT_PEERADDR:$SOCAT_PEERPORT"
		client_anonymise s_addr "$$"

		#Set trap for shutdown
		trap 'socat STDIN UNIX-SENDTO:$socket <<< "TERM-CLIENT $$ $s_addr"; exit_kill' SIGTERM SIGINT SIGABRT

		#Notify the master that we're ready to connect
		socat STDIN UNIX-SENDTO:$socket <<<"LINK-CLIENT $$ $s_addr $ln_si $ln_so"

		#Exchange data
		cat <&$ln_si >&1 &
		cat >&$ln_so <&0 &
		exit_wait
		;;
esac

